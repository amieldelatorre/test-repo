name: New Release Branch Created

on:
  push:
    branches:
      - "release/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-webapi
  FULL_IMAGE_NAME: ghcr.io/${{ github.repository }}-webapi

jobs:
  # build:
  #   uses: ./.github/workflows/build.yml

  add_version_information:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      tag_version: ${{ steps.add_version.outputs.version }}
      latest_commit: ${{ steps.add_version.outputs.latest_commit }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add version information and commit
        id: add_version
        run: |
          version=$(echo "${{ github.ref_name }}" | cut -d '/' -f 2)
          echo "# ${version}" >> ./CHANGELOG.md

          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

          git add "${file_path}"
          git commit -m "Bump to ${version}"
          git push

          latest_commit=$(git rev-parse HEAD)

          echo "::set-output name=tag_version::${version}"
          echo "::set-output name=latest_commit::${latest_commit}"

  build_images:
    needs: [add_version_information]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        docker-platform-arch:
          - amd64
          - arm64
    outputs:
      docker-platform-arch-amd64-tags: ${{ steps.output.outputs.docker-platform-arch-amd64-tags }}
      docker-platform-arch-arm64-tags: ${{ steps.output.outputs.docker-platform-arch-arm64-tags }}

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.add_version_information.outputs['latest_commit'] }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FULL_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.add_version_information.outputs['tag_version'] }}
            type=raw,value=latest
          flavor: |
            latest=false
            suffix=-${{ matrix.docker-platform-arch }}

      - name: Build and push
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./example
          platforms: linux/${{ matrix.docker-platform-arch }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.FULL_IMAGE_NAME }}
          subject-digest: ${{ steps.meta.outputs.digest }}
          push-to-registry: true

      - name: output
        id: output
        run: echo "docker-platform-arch-${{ matrix.docker-platform-arch }}-tags=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT

  build_multi_arch_image:
    needs: [build_images]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      # - name: Checkout
      #   uses: actions/checkout@v4
      #   with:
      #     ref: ${{ needs.add_version_information.outputs['latest_commit'] }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata unified
        id: metadata-unified
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FULL_IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
          flavor: |
            latest=false

      - name: Create and push multi-platform manifest
        run: |
          tags_list_amd64=(${{ needs.build_images.outputs['docker-platform-arch-amd64'] }})
          tags_list_arm64=(${{ needs.build_images.outputs['docker-platform-arch-arm64'] }})
          tags_list_unified=(${{ steps.metadata-unified.outputs.tags }})

          cmd=(docker buildx imagetools create)
          for tag in "${tags_list_unified[@]}"; do
            cmd+=(--tag "${tag}")
          done

          cmd+=("${tags_list_amd64[@]}")
          cmd+=("${tags_list_arm64[@]}")
          echo "Final command:"
          echo "    ${cmd}"

          "${cmd[@]}"

  # new_tag:

  # - name: Docker metadata amd64
  #   id: metadata-amd64
  #   uses: docker/metadata-action@v5
  #   with:
  #     images: ${{ env.FULL_IMAGE_NAME }}
  #     tags: |
  #       type=ref,event=tag
  #       type=raw,value=latest
  #     flavor: |
  #       latest=false
  #       suffix=-amd64

  # - name: Build and push
  #   id: push-amd64
  #   uses: docker/build-push-action@v5
  #   with:
  #     context: ./example
  #     platforms: linux/amd64
  #     push: true
  #     tags: ${{ steps.metadata-amd64.outputs.tags }}

  # - name: Generate Artifact Attestation
  #   uses: actions/attest-build-provenance@v2
  #   with:
  #     subject-name: ${{ env.FULL_IMAGE_NAME }}
  #     subject-digest: ${{ steps.push-amd64.outputs.digest }}
  #     push-to-registry: true

  # - name: Docker metadata arm64
  #   id: metadata-arm64
  #   uses: docker/metadata-action@v5
  #   with:
  #     images: ${{ env.FULL_IMAGE_NAME }}
  #     tags: |
  #       type=ref,event=tag
  #       type=raw,value=latest
  #     flavor: |
  #       latest=false
  #       suffix=-arm64

  # - name: Build and push
  #   id: push-arm64
  #   uses: docker/build-push-action@v5
  #   with:
  #     context: ./example
  #     platforms: linux/arm64
  #     push: true
  #     tags: ${{ steps.metadata-arm64.outputs.tags }}

  # - name: Generate Artifact Attestation
  #   uses: actions/attest-build-provenance@v2
  #   with:
  #     subject-name: ${{ env.FULL_IMAGE_NAME }}
  #     subject-digest: ${{ steps.push-arm64.outputs.digest }}
  #     push-to-registry: true

  # - name: Docker metadata unified
  #   id: metadata-unified
  #   uses: docker/metadata-action@v5
  #   with:
  #     images: ${{ env.FULL_IMAGE_NAME }}
  #     tags: |
  #       type=ref,event=tag
  #       type=raw,value=latest
  #     flavor: |
  #       latest=false

  # - name: Create and push multi-platform manifest
  #   run: |
  #     tags_list_arm64=(${{ steps.metadata-arm64.outputs.tags }})
  #     tags_list_amd64=(${{ steps.metadata-amd64.outputs.tags }})
  #     tags_list_unified=(${{ steps.metadata-unified.outputs.tags }})

  #     cmd=(docker buildx imagetools create)
  #     for tag in "${tags_list_unified[@]}"; do
  #       cmd+=(--tag "${tag}")
  #     done

  #     cmd+=("${tags_list_arm64[@]}")
  #     cmd+=("${tags_list_amd64[@]}")
  #     echo "Final command:"
  #     echo "    ${cmd}"

  #     "${cmd[@]}"

  # - name: Create and push multi-platform manifest
  #   run: |
  #     echo "waiting for registry to update"
  #     sleep 30
  #     tags_list_arm64=(${{ steps.metadata-arm64.outputs.tags }})
  #     tags_list_amd64=(${{ steps.metadata-amd64.outputs.tags }})
  #     tags_list_unified=(${{ steps.metadata-unified.outputs.tags }})

  #     docker manifest create "${tags_list_unified[@]}" "${tags_list_arm64[@]}" "${tags_list_amd64[@]}"
  #     docker manifest annotate "${tags_list_unified[@]}" "${tags_list_arm64[@]}" --arch arm64
  #     docker manifest annotate "${tags_list_unified[@]}" "${tags_list_amd64[@]}" --arch amd64

  # release:
  # needs: [push]
  # runs-on: ubuntu-latest
  # permissions:
  #   contents: write
  # steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Update release
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       TAG: ${{ github.ref_name }}
  #     run: gh release create "$TAG" --title="$TAG" --notes-file ./CHANGELOG.md
  # run: |
  #   pwd
  #   gh release create "$TAG" \
  #     --title="$TAG"
  #     --repo="$GITHUB_REPOSITORY" \
  #     --notes-file ./CHANGELOG.md
